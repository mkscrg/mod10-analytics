-- | WRONG WRONG WRONG WRONG WRONG WRONG WRONG WRONG WRONG
-- This module defines an executable called FreqPlot, which takes a
-- statistics file, generated by Scrape from the output of Mod10, and uses the
-- Graphics.Gnuplot library to plot the included frequency data using gnuplot.
module Analysis.Plots where


import Data.Array ( listArray )
import Data.List ( stripPrefix )
import Data.Maybe ( mapMaybe )
import System ( getArgs )
import System.Exit ( ExitCode )

import qualified Graphics.Gnuplot.Advanced as Plot
import qualified Graphics.Gnuplot.MultiPlot as MultiPlot
import qualified Graphics.Gnuplot.Terminal.PNG as PNG
import qualified Graphics.Gnuplot.Plot.TwoDimensional as Plot2D
import qualified Graphics.Gnuplot.Graph.TwoDimensional as Graph2D
import qualified Graphics.Gnuplot.Frame.Option as Opt
import qualified Graphics.Gnuplot.Frame.OptionSet as Opts
import qualified Graphics.Gnuplot.Frame as Frame


-- | Extract the frequency data from a chunk of the stats file, and construct
-- the IO action necessary to make a .png plot of the data.
makePlot :: [String] -> IO ExitCode
makePlot run = Plot.plot term $ MultiPlot.simpleFromPartArray $
               listArray ((0::Int, 0::Int), (1, 0)) $
               map MultiPlot.partFromFrame frames
  where
    frames = zipWith Frame.cons options $
             map (Plot2D.list Graph2D.lines) freqs
    options = map (\o -> o genOpt) [topOpt, botOpt]
    topOpt = Opts.title figtitle .
             Opts.add (Opt.custom "bmargin") ["0.0"] .
             Opts.yLabel "winning" .
             Opts.remove Opt.xTicks
    botOpt = Opts.add (Opt.custom "tmargin") ["0.0"] .
             Opts.yLabel "losing" .
             Opts.add Opt.xTicks ["nomirror"]
    genOpt = Opts.xRange2d (0,1500) $
             Opts.remove Opt.yTicks $
             Opts.remove Opt.key Opts.deflt
    term = PNG.fontLarge $
           PNG.cons fname
    figtitle = "# of Rounds in Winning and Losing Games (" ++
               last (words (run !! 1)) ++ ")"
    fname = plotFilename $ head run
    freqs = map (\lab -> read $ head $ mapMaybe (stripPrefix lab) run)
                dataLabels :: [[(Int,Int)]]
    dataLabels = ["    win freq.s: ", "   loss freq.s: "]


-- | Strip a FilePath's [rightmost] extension, and replace with ".png"
plotFilename :: FilePath -> FilePath
plotFilename runFName = fst (break (== '.') runFName) ++ ".png"
